name: Full CICD Pipeline with Monitoring Setup

on:
  workflow_dispatch:
    inputs:
      grafana_version:
        description: 'Grafana version (leave empty for latest)'
        required: false
        default: ''
      prometheus_version:
        description: 'Prometheus version (leave empty for latest)'
        required: false
        default: ''

jobs:
  compile:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: mvn compile

  security-check:
    runs-on: ubuntu-latest
    needs: compile
    steps:
    - uses: actions/checkout@v4
    - name: Trivy Installation
      run: |
        sudo apt-get install -y wget apt-transport-https gnupg lsb-release
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
        sudo apt-get update -y
        sudo apt-get install -y trivy
    - name: Trivy FS Scan
      run: trivy fs --format table -o fs-report.json .
    - name: Gitleaks Installation
      run: sudo apt install gitleaks -y
    - name: Gitleaks Code Scan
      run: gitleaks detect source . -r gitleaks-report.json -f json

  test:
    runs-on: ubuntu-latest
    needs: security-check
    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Unit Test Cases
      run: mvn test

  build_project_and_sonar_scan:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Build Project
      run: mvn package
    - name: Upload JAR artifact
      uses: actions/upload-artifact@v4
      with:
        name: app-jar
        path: target/*.jar
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Disabling shallow clones is recommended for improving the relevancy of reporting
    # - name: SonarQube Scan
    #   uses: SonarSource/sonarqube-scan-action@v5.0.0
    #   env:
    #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    #     SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}
    # - name: SonarQube Quality Gate check
    #   id: sonarqube-quality-gate-check
    #   uses: sonarsource/sonarqube-quality-gate-action@master
    #   with:
    #     pollingTimeoutSec: 600
    #   env:
    #       SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    #       SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}

  buils_docker_image_and_push:
    runs-on: ubuntu-latest
    needs: build_project_and_sonar_scan
    steps:
    - uses: actions/checkout@v4
    - name: Download JAR artifact
      uses: actions/download-artifact@v4
      with:
        name: app-jar
        path: app # this will download JAR to ./app folder
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Build and Push Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        push: true
        tags: balrajsi/bankapp:latest # define here your Docker login name
        file: ./Dockerfile

  deploy_to_kubernetes:
    runs-on: ubuntu-latest
    needs: buils_docker_image_and_push
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: latest
    - name: Configure kubeconfig
      run: |
        mkdir -p $HOME/.kube
        echo "${{ secrets.EKS_KUBECONFIG }}" > $HOME/.kube/config
    - name: Verify the context
      run: |
        kubectl config view
    - name: To get the full role ARN
      run: |
        aws sts get-caller-identity
    # - name: Deploy to EKS
    #   run: |
    #     kubectl apply -f ds.yml

  install-monitoring-tools:
    runs-on: ubuntu-latest # Using ubuntu-latest as per the original monitoring workflow
    needs: deploy_to_kubernetes # This job runs after successful deployment
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3 # Using v3 as in the original monitoring workflow

      - name: Setup environment
        shell: bash
        run: |
          echo "Setting up environment for monitoring tools installation"
          sudo apt-get update -y
          sudo apt-get install -y curl wget apt-transport-https software-properties-common

      - name: Get latest Grafana version if not specified
        id: grafana_version
        shell: bash
        run: |
          if [ -z "${{ github.event.inputs.grafana_version }}" ]; then
            GRAFANA_VERSION=$(curl -s https://api.github.com/repos/grafana/grafana/releases/latest | grep -oP '"tag_name": "v\K(.*)(?=")')
            echo "Using latest Grafana version: ${GRAFANA_VERSION}"
            echo "VERSION=${GRAFANA_VERSION}" >> $GITHUB_OUTPUT
          else
            echo "Using specified Grafana version: ${{ github.event.inputs.grafana_version }}"
            echo "VERSION=${{ github.event.inputs.grafana_version }}" >> $GITHUB_OUTPUT
          fi

      - name: Install Grafana
        shell: bash
        run: |
          echo "Installing Grafana"
          wget -q -O - https://packages.grafana.com/gpg.key | sudo apt-key add -
          echo "deb https://packages.grafana.com/oss/deb stable main" | sudo tee -a /etc/apt/sources.list.d/grafana.list
          sudo apt-get update -y
          sudo apt-get install -y grafana
          # Enable and start Grafana service
          sudo systemctl enable grafana-server
          sudo systemctl start grafana-server
          echo "Grafana installation completed"

      - name: Get latest Prometheus version if not specified
        id: prometheus_version
        shell: bash
        run: |
          if [ -z "${{ github.event.inputs.prometheus_version }}" ]; then
            PROMETHEUS_VERSION=$(curl -s https://api.github.com/repos/prometheus/prometheus/releases/latest | grep -oP '"tag_name": "v\K(.*)(?=")')
            echo "Using latest Prometheus version: ${PROMETHEUS_VERSION}"
            echo "VERSION=${PROMETHEUS_VERSION}" >> $GITHUB_OUTPUT
          else
            echo "Using specified Prometheus version: ${{ github.event.inputs.prometheus_version }}"
            echo "VERSION=${{ github.event.inputs.prometheus_version }}" >> $GITHUB_OUTPUT
          fi

      - name: Install Prometheus
        shell: bash
        run: |
          echo "Installing Prometheus v${{ steps.prometheus_version.outputs.VERSION }}"
          # Create prometheus user
          sudo useradd --no-create-home --shell /bin/false prometheus || echo "User prometheus may already exist"
          # Create directories
          sudo mkdir -p /etc/prometheus /var/lib/prometheus
          # Download and extract Prometheus
          wget https://github.com/prometheus/prometheus/releases/download/v${{ steps.prometheus_version.outputs.VERSION }}/prometheus-${{ steps.prometheus_version.outputs.VERSION }}.linux-amd64.tar.gz
          tar -xvf prometheus-${{ steps.prometheus_version.outputs.VERSION }}.linux-amd64.tar.gz
          # Copy binaries
          sudo cp prometheus-${{ steps.prometheus_version.outputs.VERSION }}.linux-amd64/prometheus /usr/local/bin/
          sudo cp prometheus-${{ steps.prometheus_version.outputs.VERSION }}.linux-amd64/promtool /usr/local/bin/
          # Copy configs (handling both directory structures)
          if [ -d "prometheus-${{ steps.prometheus_version.outputs.VERSION }}.linux-amd64/consoles" ]; then
            sudo cp -r prometheus-${{ steps.prometheus_version.outputs.VERSION }}.linux-amd64/consoles /etc/prometheus/
          else
            echo "Consoles directory not found, creating empty directory"
            sudo mkdir -p /etc/prometheus/consoles
          fi
          if [ -d "prometheus-${{ steps.prometheus_version.outputs.VERSION }}.linux-amd64/console_libraries" ]; then
            sudo cp -r prometheus-${{ steps.prometheus_version.outputs.VERSION }}.linux-amd64/console_libraries /etc/prometheus/
          else
            echo "Console_libraries directory not found, creating empty directory"
            sudo mkdir -p /etc/prometheus/console_libraries
          fi
          # Create default config
          sudo tee /etc/prometheus/prometheus.yml > /dev/null << EOF
          global:
            scrape_interval: 15s
          scrape_configs:
            - job_name: 'prometheus'
              scrape_interval: 5s
              static_configs:
                - targets: ['localhost:9090']
          EOF
          # Set permissions
          sudo chown -R prometheus:prometheus /etc/prometheus /var/lib/prometheus
          # Create systemd service
          sudo tee /etc/systemd/system/prometheus.service > /dev/null << EOF
          [Unit]
          Description=Prometheus
          Wants=network-online.target
          After=network-online.target
          [Service]
          User=prometheus
          Group=prometheus
          Type=simple
          ExecStart=/usr/local/bin/prometheus \\
              --config.file /etc/prometheus/prometheus.yml \\
              --storage.tsdb.path /var/lib/prometheus/ \\
              --web.console.templates=/etc/prometheus/consoles \\
              --web.console.libraries=/etc/prometheus/console_libraries
          [Install]
          WantedBy=multi-user.target
          EOF
          # Enable and start service
          sudo systemctl daemon-reload
          sudo systemctl enable prometheus
          sudo systemctl start prometheus
          # Clean up
          rm -rf prometheus-${{ steps.prometheus_version.outputs.VERSION }}.linux-amd64*
          echo "Prometheus installation completed"

      - name: Configure Grafana data source for Prometheus
        shell: bash
        run: |
          echo "Configuring Prometheus data source in Grafana"
          # Wait for Grafana to be ready
          sleep 10
          # Add Prometheus data source to Grafana
          curl -X POST -H "Content-Type: application/json" -d '{
            "name":"Prometheus",
            "type":"prometheus",
            "url":"http://localhost:9090",
            "access":"proxy",
            "basicAuth":false,
            "isDefault":true
          }' http://admin:admin@localhost:3000/api/datasources
          echo "Data source configuration completed"

      - name: Verify services are running
        shell: bash
        run: |
          echo "Verifying services are running..."
          if systemctl is-active --quiet grafana-server; then
            echo "Grafana is running"
          else
            echo "Grafana service is not running"
            exit 1
          fi
          if systemctl is-active --quiet prometheus; then
            echo "Prometheus is running"
          else
            echo "Prometheus service is not running"
            exit 1
          fi
          echo "All monitoring tools are installed and running successfully!"

